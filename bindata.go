// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/run
// templates/server.properties
package mcconfig

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesRun = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6f\x9b\x40\x10\x85\xef\xf9\x15\x54\x95\x7a\xa9\x0c\xc6\x49\xa5\x36\x12\x95\x2a\xdb\xa2\x95\x42\x83\x30\x69\x73\x9d\x2c\xe3\x65\x92\x65\x17\xed\xec\x62\xdc\x28\xff\xbd\x02\x83\x55\x59\xbd\xb1\xef\x7d\xf3\x1e\x9a\x79\xff\x2e\x7a\x22\x1d\x71\x7d\x75\xf5\x0c\x1d\x04\x8b\xc7\x86\x5f\x5f\x83\x30\xc3\xc6\xd8\xe3\x1d\x35\xe4\x82\xb7\xb7\x6c\xd0\xfb\xff\xeb\x8f\xb7\x1f\x1f\x18\xd3\x38\x5d\x9f\x1e\x39\x58\x50\x0a\x55\x81\xfb\xdc\x1a\xb1\xd5\xf0\xa4\xb0\x1a\xbd\x0c\xfa\x74\x9d\x83\x67\xcc\x48\x29\xe2\x64\xb5\x5c\x4e\x09\x5a\x19\xf1\xb2\xed\x5b\xb4\xd4\xa0\x76\xa0\x7e\x65\xf7\xad\x23\xa3\xf9\x04\x6c\x88\x87\x9c\x6d\xdf\x2a\x12\xe4\xe6\xb2\x6f\xea\x00\x47\xce\x2d\x96\xc6\x8b\x7a\xd4\xd2\xf8\x27\x1e\x76\xf4\x07\x73\xb4\x02\xb5\x4b\xae\x97\x93\x9e\x41\x7f\x61\xdd\xcc\xd6\x77\x84\xb6\x40\x49\x46\x0f\x76\xf2\x39\x9b\xf4\x02\x19\x6d\x77\xe6\x57\xff\xf2\xbf\x81\xdd\xd9\xf9\x34\x77\x50\x8f\x55\xba\x5e\x1b\xaf\x5d\x09\x56\xa2\x4b\x6e\x46\xeb\x87\x26\x47\xe0\x48\xcb\x61\xf6\x5e\x08\xdf\x82\x16\xc7\x79\x3e\xbe\x08\xb8\xa3\x0e\xcb\xda\x22\xd7\x46\x55\x33\xf4\x65\xae\x2f\x76\xe8\x1e\xda\x6a\x8c\x1b\xf7\x59\x52\x73\xf1\x2b\x3b\x6f\x3b\xea\x8c\x2d\xc0\x91\x49\xae\x57\xd3\x71\xd0\xee\xa7\x55\xee\x6a\xb0\x58\x65\xd8\xcc\xa7\x29\x51\x7b\x4b\x5a\x9e\x6b\x93\x38\x58\x6c\x3c\x93\x96\x21\xd0\x0b\x58\x0e\xf7\x0a\x24\x27\xb5\x73\x2d\xdf\x46\x51\x23\xc6\x77\x88\x8d\x08\x25\x07\x8b\xcd\x44\x69\x3c\x4c\xa4\xb3\x1e\x83\xc5\x33\xd8\x20\xe2\x96\xa4\x71\xe1\xf0\xad\x8d\xf4\x14\xac\xbe\x7e\x88\xff\x06\x00\x00\xff\xff\xf0\xa1\x43\x62\x7e\x02\x00\x00")

func templatesRunBytes() ([]byte, error) {
	return bindataRead(
		_templatesRun,
		"templates/run",
	)
}

func templatesRun() (*asset, error) {
	bytes, err := templatesRunBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/run", size: 638, mode: os.FileMode(493), modTime: time.Unix(1608272086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServerProperties = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x54\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\xec\x1f\xe0\xc2\x29\x8a\xde\x7c\xd8\xcd\x76\x3f\x80\x38\x75\xa3\xa0\x39\xd3\xd4\x48\x9a\x9a\xe4\xb0\xe4\xc8\xb2\x13\xe4\xbf\x17\x43\x4a\x96\x8c\xdc\xc4\x37\xef\x91\xa3\x37\x1f\x29\xe8\xd1\xab\x10\x89\xc1\x30\x92\xdf\xbe\xbd\x7d\xfa\x5c\x0b\xb8\xbf\x62\x9f\xde\xdf\x2b\xa7\xcf\x8a\xd1\x1c\x15\xa3\x83\xed\x1f\x9b\xcd\x66\x53\xfd\x37\x40\xbc\x7c\x0e\x14\x39\xab\xfe\x96\xe3\x9e\x22\x0b\xbf\x03\x0f\x51\x33\x45\x95\x80\x19\x7d\x97\x32\xe7\xc7\x0c\xd7\x13\x2a\xdc\x74\xf1\x46\x99\x7e\xf0\x47\x35\x46\x64\x48\x5b\x8e\x03\x54\x2d\x45\x03\xaa\xd3\x0e\x1c\x35\x90\xe5\xdf\x05\xfa\x31\x21\x22\xd5\xd6\xd2\xa8\x3c\x70\x0f\xb1\xa8\xc0\x17\xdd\xd8\x23\x83\xc5\x54\x72\xfb\xb3\xa0\x2f\x33\x98\x53\x5c\xdf\xbc\xbe\xf4\x10\x49\x37\x46\x27\x56\x86\x7c\x22\x0b\x8a\x49\x51\x48\xf3\x03\xfa\x60\x41\xe5\x9f\x9f\xee\x16\x20\xff\xbd\xa8\x83\xd5\x17\x88\x0a\x1b\xd1\xa1\x03\x1a\x4a\x0a\xfb\x8c\xff\x6a\x2c\x3c\x17\x54\xc8\x0c\x67\x56\x2d\x5a\x86\x88\xbe\x93\xf7\x5a\xec\xb6\x55\x83\x6d\x8b\x66\xb0\x5c\x5e\xf8\x76\x3d\xde\xa6\x17\x0d\xf9\x9b\xdc\x4a\x35\x1d\xf9\xc4\x10\xd3\x52\xcb\xdd\x84\x88\x9c\x82\x0a\x10\x1d\xa6\x84\xe4\x95\x85\x13\xd8\xed\xef\x55\x38\x85\x92\xe5\x29\x08\x09\x3c\x23\x5f\xd4\xea\x29\xed\x3b\x10\xa1\x01\xcf\xba\x83\xed\xdd\x66\x53\x25\x4f\x14\x20\xaa\x62\x49\xb3\x6d\xb5\x4d\x50\xe5\x2b\x15\x5f\x42\x71\xf6\x41\x8e\xcf\x97\x00\xe5\xde\x6c\x5e\x62\xcd\x43\x5a\xb9\x57\x67\x40\x18\xbd\x8e\x8d\xa1\x58\xb4\x3f\xa7\xc3\x4a\x6a\xc8\x39\xed\x1b\x75\xb0\x64\x8e\xab\x1b\xee\x0b\xfe\x55\x60\xa1\x7b\xe0\x91\xe2\x51\xf8\x21\x42\xf9\x59\xee\x23\xa4\x9e\x6c\x93\x75\x8f\x85\x71\xbf\x10\x9e\xe7\xf8\xdc\xf1\xa5\x96\x25\xd1\x9d\x3e\x97\x12\xa6\x39\x3a\x52\xb4\x8d\x4a\xf8\x0a\x33\xe1\x45\x90\x1a\x5f\x73\xc2\x11\x12\x0d\xd2\x8a\x41\x9b\xa3\x4a\xbd\xbe\xcb\xb4\xa7\x09\xde\x6b\x73\xac\x7b\x7d\x27\xd4\x76\xf0\x79\xd2\x3e\x56\xe6\xb7\x4a\x8a\xbc\x0c\xd9\x93\x21\x3f\xcf\x58\x82\x78\x82\xa8\xae\xb1\x3a\x9f\xe7\x68\x03\x87\xa1\x2b\xed\x23\x5f\x2b\x01\x86\x15\xfd\x57\xae\x77\x69\x1c\x1f\xcc\xaa\x69\x1e\x83\x49\xcb\x8c\xb5\x16\xbb\xbe\xbc\xf3\x45\x80\xef\xf9\x2c\xf1\x52\x6f\xaf\xdd\xaa\xde\x8f\xda\x65\x0f\x4e\x08\xa3\x6a\x30\xb1\xf6\xa6\x84\xff\x41\x18\xbf\x4d\xc0\x07\x97\x3e\x18\xb4\xe4\xa6\x3d\x3a\x6d\x57\xe9\x7d\x29\x80\x30\xf2\xac\xab\xeb\xb0\xe7\x29\x7f\x98\xa6\xbc\xd8\xa7\x53\x1a\x29\x36\x8b\x85\x13\xb0\x5a\x55\xd2\x95\x71\x30\x3c\x44\xb8\xd9\x55\x50\x5f\xe1\x3c\x3e\xde\xa2\x07\x75\x5d\x1c\x7f\xe5\xf3\x6e\x5a\x1d\xd2\x16\x87\x01\x6d\xa3\x7a\xb8\xfa\xb5\xd3\xe7\xaf\x82\xfd\x84\x5b\xcb\x12\x40\xb3\x58\x56\x03\xe4\x74\x42\x84\x13\x78\x96\x9d\x7c\xbe\xc8\x46\xf0\x65\x0b\x97\xa4\xf6\x25\xba\x97\xe0\xfd\x12\x13\xe1\x90\x40\x79\xcd\x78\x02\xc5\x51\xfb\x94\xfb\x62\xbd\xb2\xfe\x75\x67\xd9\x0d\xc8\x24\xcb\x66\x9a\x56\x47\x5c\x92\xd8\x11\xe7\xf7\xb3\x15\x16\x1d\x4e\x0d\xa7\xc5\x4b\x87\xbc\x9a\x41\xf1\x74\x35\x7a\x62\xa8\x44\xff\x0f\x00\x00\xff\xff\xfb\x81\x35\x2b\x4c\x06\x00\x00")

func templatesServerPropertiesBytes() ([]byte, error) {
	return bindataRead(
		_templatesServerProperties,
		"templates/server.properties",
	)
}

func templatesServerProperties() (*asset, error) {
	bytes, err := templatesServerPropertiesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/server.properties", size: 1612, mode: os.FileMode(420), modTime: time.Unix(1608275278, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/run": templatesRun,
	"templates/server.properties": templatesServerProperties,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"run": &bintree{templatesRun, map[string]*bintree{}},
		"server.properties": &bintree{templatesServerProperties, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

