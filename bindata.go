// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/run
// templates/server.properties
package mcconfig

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesRun = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6f\x9b\x40\x10\x85\xef\xf9\x15\x54\x95\x7a\xa9\x0c\xc6\x49\xa5\x36\x12\x95\x2a\xdb\xa2\x95\x42\x83\x30\x69\x73\x9d\x2c\xe3\x65\x92\x65\x17\xed\xec\x62\xdc\x28\xff\xbd\x02\x83\x55\x59\xbd\xb1\xef\x7d\xf3\x1e\x9a\x79\xff\x2e\x7a\x22\x1d\x71\x7d\x75\xf5\x0c\x1d\x04\x8b\xc7\x86\x5f\x5f\x83\x30\xc3\xc6\xd8\xe3\x1d\x35\xe4\x82\xb7\xb7\x6c\xd0\xfb\xff\xeb\x8f\xb7\x1f\x1f\x18\xd3\x38\x5d\x9f\x1e\x39\x58\x50\x0a\x55\x81\xfb\xdc\x1a\xb1\xd5\xf0\xa4\xb0\x1a\xbd\x0c\xfa\x74\x9d\x83\x67\xcc\x48\x29\xe2\x64\xb5\x5c\x4e\x09\x5a\x19\xf1\xb2\xed\x5b\xb4\xd4\xa0\x76\xa0\x7e\x65\xf7\xad\x23\xa3\xf9\x04\x6c\x88\x87\x9c\x6d\xdf\x2a\x12\xe4\xe6\xb2\x6f\xea\x00\x47\xce\x2d\x96\xc6\x8b\x7a\xd4\xd2\xf8\x27\x1e\x76\xf4\x07\x73\xb4\x02\xb5\x4b\xae\x97\x93\x9e\x41\x7f\x61\xdd\xcc\xd6\x77\x84\xb6\x40\x49\x46\x0f\x76\xf2\x39\x9b\xf4\x02\x19\x6d\x77\xe6\x57\xff\xf2\xbf\x81\xdd\xd9\xf9\x34\x77\x50\x8f\x55\xba\x5e\x1b\xaf\x5d\x09\x56\xa2\x4b\x6e\x46\xeb\x87\x26\x47\xe0\x48\xcb\x61\xf6\x5e\x08\xdf\x82\x16\xc7\x79\x3e\xbe\x08\xb8\xa3\x0e\xcb\xda\x22\xd7\x46\x55\x33\xf4\x65\xae\x2f\x76\xe8\x1e\xda\x6a\x8c\x1b\xf7\x59\x52\x73\xf1\x2b\x3b\x6f\x3b\xea\x8c\x2d\xc0\x91\x49\xae\x57\xd3\x71\xd0\xee\xa7\x55\xee\x6a\xb0\x58\x65\xd8\xcc\xa7\x29\x51\x7b\x4b\x5a\x9e\x6b\x93\x38\x58\x6c\x3c\x93\x96\x21\xd0\x0b\x58\x0e\xf7\x0a\x24\x27\xb5\x73\x2d\xdf\x46\x51\x23\xc6\x77\x88\x8d\x08\x25\x07\x8b\xcd\x44\x69\x3c\x4c\xa4\xb3\x1e\x83\xc5\x33\xd8\x20\xe2\x96\xa4\x71\xe1\xf0\xad\x8d\xf4\x14\xac\xbe\x7e\x88\xff\x06\x00\x00\xff\xff\xf0\xa1\x43\x62\x7e\x02\x00\x00")

func templatesRunBytes() ([]byte, error) {
	return bindataRead(
		_templatesRun,
		"templates/run",
	)
}

func templatesRun() (*asset, error) {
	bytes, err := templatesRunBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/run", size: 638, mode: os.FileMode(493), modTime: time.Unix(1608272086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServerProperties = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x54\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\xec\x1f\x60\xe0\x14\x45\x6f\x3e\xec\x66\xbb\x1f\xc0\x3a\x75\xa3\xa0\x39\xd3\xd4\x48\x9a\x9a\xe4\xb0\xe4\xc8\xb2\x13\xe4\xbf\x17\x43\x4a\x96\x8c\xdc\xc4\x37\xef\x91\xa3\x37\x1f\x29\xe8\xd1\xab\x10\x89\xc1\x30\x92\xdf\xbe\xbd\x7d\xba\xab\x05\xdc\x5f\xb1\x4f\xef\xef\x95\xd3\x67\xc5\x68\x8e\x8a\xd1\xc1\xf6\x8f\xcd\x66\xb3\xa9\xfe\x1b\x20\x5e\xee\x02\x45\xce\xaa\xbf\xe5\xb8\xa7\xc8\xc2\xef\xc0\x43\xd4\x4c\x51\x25\x60\x46\xdf\xa5\xcc\xf9\x3e\xc3\xf5\x84\x0a\x37\x5d\xbc\x51\xa6\x1f\xfc\x51\x8d\x11\x19\xd2\x96\xe3\x00\x55\x4b\xd1\x80\xea\xb4\x03\x47\x0d\x88\xfc\x9b\x20\xdf\x27\x40\x94\xda\x5a\x1a\x95\x07\xee\x21\x16\x11\xf8\x22\x1b\x7b\x64\xb0\x98\x4a\x6a\x7f\x16\xf4\x65\x06\x73\x86\xab\x8b\xef\xd6\x97\x1e\x22\xe9\xc6\xe8\xc4\xca\x90\x4f\x64\x41\x31\x29\x0a\x69\x7e\x40\x1f\x2c\xa8\xfc\xef\xd3\xdd\x02\xe4\x9f\x17\x75\xb0\xfa\x02\x51\x61\x23\x3a\x74\x40\x43\x49\x61\x9f\xf1\x9f\x8d\x85\xe7\x82\x0a\x99\xe1\xcc\xaa\x45\xcb\x10\xd1\x77\xf2\x5e\x8b\xdd\xb6\x6a\xb0\x6d\xd1\x0c\x96\xcb\x0b\x5f\xaf\xc7\xdb\xf4\xa2\x21\x7f\x93\x5b\x29\xa6\x23\x9f\x18\x62\x5a\x4a\xb9\x9b\x10\x91\x53\x50\x01\xa2\xc3\x94\x90\xbc\xb2\x70\x02\xbb\xfd\xbd\x0a\xa7\x50\xb2\x3c\x05\x21\x81\x67\xe4\x8b\x5a\x3d\xa5\x7d\x07\x22\x34\xe0\x59\x77\xb0\xbd\xdf\x6c\xaa\xe4\x89\x02\x44\x55\x2c\x69\xb6\xad\xb6\x09\xaa\x7c\xa5\xe2\x4b\x28\xce\xfe\x92\xe3\xf3\x25\x40\xb9\x37\x9b\x97\x58\xf3\x90\x56\xee\xd5\x19\x10\x46\xaf\x63\x63\x28\x16\xed\x8f\xe9\xb0\x92\x1a\x72\x4e\xfb\x46\x1d\x2c\x99\xe3\xea\x86\x87\x82\x7f\x11\x58\xe8\x1e\x78\xa4\x78\x14\x7e\x88\x50\x7e\x96\xfb\x08\xa9\x27\xdb\x64\xdd\x63\x61\x3c\x2c\x84\xe7\x39\x3e\x37\x7c\xa9\x65\x49\x74\xa7\xcf\xa5\x84\x69\x8e\x8e\x14\x6d\xa3\x12\xbe\xc2\x4c\x78\x11\xa4\xc6\xd7\x9c\x70\x84\x44\x83\xb4\x62\xd0\xe6\xa8\x52\xaf\xef\x33\xed\x69\x82\xf7\xda\x1c\xeb\x5e\xdf\x0b\xb5\x1d\x7c\x1e\xb4\x8f\x95\xf9\xad\x92\x22\x2f\x33\xf6\x64\xc8\xcf\x23\x96\x20\x9e\x20\xaa\x6b\xac\xce\xe7\x39\xda\xc0\x61\xe8\x4a\xfb\xc8\xd7\x4a\x80\x61\x45\xff\x99\xeb\x5d\x1a\xc7\x07\xb3\x6a\x9a\xc7\x60\xd2\x32\x63\xad\xc5\xae\x2f\xef\x7c\x16\xe0\x5b\x3e\x4b\xbc\xd4\xdb\x6b\xb7\xaa\xf7\xa3\x76\xd9\x83\x13\xc2\xa8\x1a\x4c\xac\xbd\x29\xe1\x7f\x10\xc6\xaf\x13\xf0\xc1\xa5\x0f\x06\x2d\xb9\x69\x8f\x4e\xdb\x55\x7a\x9f\x0b\x20\x8c\x3c\xeb\xea\x3a\xec\x79\xca\x7f\x4d\x53\x5e\xec\xd3\x29\x8d\x14\x9b\xc5\xc2\x09\x58\x6d\x2a\xe9\xca\x38\x18\x1e\x22\xdc\xac\x2a\xa8\xaf\x70\x1e\x1f\x6f\xd1\x83\xba\x2e\x8e\xbf\xf2\x79\x37\xad\x0e\x69\x8b\xc3\x80\xb6\x51\x3d\x5c\xfd\xda\xe9\xf3\x17\xc1\x7e\xc0\xad\x65\x09\xa0\x59\x2c\xab\x01\x72\x3a\x21\xc2\x09\x3c\xcb\x4a\x3e\x5f\x64\x23\xf8\xb2\x84\x4b\x52\xfb\x12\xdd\x4b\xf0\x61\x89\x89\x70\x48\xa0\xbc\x66\x3c\x81\xe2\xa8\x7d\xca\x7d\xb1\x5e\x59\xff\xba\xb3\xec\x06\x64\x92\x65\x33\x4d\xab\x23\x2e\x49\xec\x88\xf3\xfb\xd9\x0a\x8b\x0e\xa7\x86\xd3\xe2\xa5\x43\x5e\xcd\xa0\x78\xba\x1a\x3d\x31\x54\xa2\xff\x07\x00\x00\xff\xff\xd5\xdb\xbf\x32\x4b\x06\x00\x00")

func templatesServerPropertiesBytes() ([]byte, error) {
	return bindataRead(
		_templatesServerProperties,
		"templates/server.properties",
	)
}

func templatesServerProperties() (*asset, error) {
	bytes, err := templatesServerPropertiesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/server.properties", size: 1611, mode: os.FileMode(420), modTime: time.Unix(1608272866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/run": templatesRun,
	"templates/server.properties": templatesServerProperties,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"run": &bintree{templatesRun, map[string]*bintree{}},
		"server.properties": &bintree{templatesServerProperties, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

